const Todo = require("../models/Todo");
require("dotenv").config();
const key = process.env.JWTKEY;
const Helper = require("../helper/index");
const { OTPHelper, TodoHelper } = Helper.module;

class todoController {
  async getAllTodo(req, res) {
    try {
      console.log(req.user.id);
      const todos = await Todo.find({ user: req.user.id });
      return res.json(todos);
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  }
  async createTodo(req, res) {
    try {
      await TodoHelper.todoCheck(req.body.title);

      const todo = new Todo({
        user: req.user.id,
        title: req.body.title,
        description: req.body.description,
        completed: false,
      });
      const newTodo = await todo.save();
      res.status(201).json(newTodo);
    } catch (err) {
      res.status(400).json({ message: err.message });
    }
  }
}

module.exports = new todoController();
const model = require("../models/Todo");

class TodoHelper {
  async todoCheck(title) {
    const todoExist = await model.findOne({ title: title });
    if (todoExist) throw { message: "Title already exists", status: false };
  }
}
module.exports = new TodoHelper();
const model = require("../models/User");
const otpmodel = require("../models/otpmodel");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
require("dotenv").config();
const key = process.env.JWTKEY;
const Helper = require("../helper/index");
const otpHelper = require("../helper/otp.helper");
const { OTPHelper, UserHelper } = Helper.module;

class authController {
  async signUp(req, res) {
    try {
      await UserHelper.userCheck(req.body.email);
      const password = await UserHelper.encryptPassword(req.body.password);
      const data = await model.create({ ...req.body, password });
      return res.json({ data, status: true });
    } catch (error) {
      console.log(error.message);
      res.status(500).send(error);
    }
  }

  async forgotPassword(req, res) {
    try {
      console.log("inside forget");
      if (!req.body.password) throw "only password will change";
      const password = await UserHelper.encryptPassword(req.body.password);
      await UserHelper.updateData(req.params.email, password);
      res.send({ message: "Password Updated Successfully" });
    } catch (error) {
      res.status(500).send(error);
    }
  }

  async generateOTP(req, res) {
    try {
      console.log(" inside generation of OTP");
      const check = await OTPHelper.checkEmail(req.body.email);
      if (!check) throw { message: "Unregistered email given" };
      const otp = OTPHelper.genrateRandamNo();
      const encOtp = await OTPHelper.encryptOTP(otp);
      const isEmail = await otpmodel.findOne({ email: req.body.email });
      let user = isEmail;
      if (isEmail) {
        await otpmodel.updateOne({ ...req.body, otp: encOtp });
      } else {
        user = await otpmodel.create({ ...req.body, otp: encOtp });
      }
      await OTPHelper.sendOTPOnMobile(otp);
      // await OTPHelper.sendOTPOnEmail(otp)
      let currentTime = new Date();
      currentTime.setMinutes(currentTime.getMinutes() + 1);
      const encData = { email: user.email, exp: currentTime };
      let token = OTPHelper.generateOtpToken(encData);
      res.json({ message: "OTP sent successfully...", status: true, token });
    } catch (error) {
      console.log(error);
      res.status(500).json({ error, status: false });
    }
  }

  async login(req, res) {
    try {
      const { email, password } = req.body;

      if (!email || !password)
        throw { message: "Email/UserName & password required" };
      const user = await model.findOne({ email: email.toLowerCase() });
      if (!user || !(await bcrypt.compare(password, user.password))) {
        throw { message: "Invalid Login Credentials", status: false };
      }

      const token = jwt.sign(
        { email: user.email, id: user._id, role: user.role },
        key,
        { expiresIn: "10h" }
      );

      console.log(token);
      return res.send({ token, status: true, role: user.role });
    } catch (error) {
      res.json({ error, status: false });
    }
  }

  async getUserbyID(req, res) {
    try {
      console.log("inside getuserbyID", req.params);
      const { id } = req.params;
      if (!id) throw { message: "No id given", status: false };
      const userData = await model
        .findOne({ _id: id }, "userName email firstName lastName")
        .exec();
      if (!userData) throw { message: "No user Found", status: false };

      res.json({ userData, status: true });
    } catch (error) {
      res.status(500).send(error);
    }
  }
}

module.exports = new authController();
